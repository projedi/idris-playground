1. Всем превет.

2. Idris - очередной хаскелоподобный язычок с зависимыми типами. Но, в отличии от к-н
   агды, фокус при разработке ставится на программирование, а не доказательство теорем.

3. Когда я говорю "хаскелоподобный", я имею ввиду вот это. От хаскела этот код отличается
   только тем, где стоит :, а где :: и тем, что fmap зовется map. А если сравнить с агдой, то:
   * есть простые ADT,
   * неявные аргументы типов еще более неявные,
   * нету mixfix,
   * полноценные классы типов.

4. Далее, есть монады, аппликативные функторы (при этом каждая монада обязана быть аппликативным функтором),
   есть do-нотация. А также, в отличие от хаскела, синтаксический сахар для списков работает для всех типов
   данных с конструкторами Nil и (::).

5. И к этому всему еще добавлены зависимые типы. Неявные аргументы до сих пор неявные - типы читать намного
   проще, чем в агде (имхо, разумеется).

6. Чтобы быть полезным на практике, нельзя требовать тотальность. Но иногда тотальность нужна:
   * в типах редуцируются только тотальные функции,
   * просто хочется.
   Есть 2 способа заставить компилятор выдавать ошибку на нетотальные функции:
   * прописывать для каждой функции,
   * прописать для всего модуля.
   Также можно в интерпретаторе проверить на тотальность.

7. Поскольку язык не тотальный, то порядок редукции имеет значение. В Idris (а точнее в его
   бэкенде по умолчанию) используется строгий порядок. В интерпретаторе же видна ленивость.
   Я не знаю, с чем это связано. Но редуктор в интерпретаторе используется тот же самый, что
   и при проверке типов.

8. А еще в Idris есть тактики, совсем как в Coq. На слайде целиком представлен файл tactics.idr.
   Они, правда, очень сырые. Код до комментария был написан вручную, а после - вставлен интерпретаром
   после интерактивного доказательства.
   TODO: Add full session of proving.

9. И сейчас коротко о нескольких языковых фичах:
   * именованные инстансы,
   * идиоматические скобки,
   * синтаксический сахар для монад,
   * records.

10.
   * опциональная ленивость (расставляем Delay, а компилятор сам подставит Force, где нужно),
   * нет mixfix, но есть изменяемый синтаксис,
   * пока что существует какой-никакай вывод типов в where, но его хотят убрать, потому что баги,
   * равенство гетерогенное,
   * автоматические неявные аргументы.

11. 
